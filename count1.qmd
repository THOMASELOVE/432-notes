# Modeling a Count Outcome {#sec-count1}

In this chapter, and the next two chapters, I use a count outcome (# of poor physical health days out of the last 30) in OHIO SMART data created in @sec-smart to demonstrate regression models for count outcomes. 

Methods discussed in the chapter include:

- Ordinary Least Squares
- Poisson Regression
- Overdispersed Quasi-Poisson Regression

## R Setup Used Here

```{r}
#| warning: false
#| message: false

knitr::opts_chunk$set(comment = NA)

library(broom)
library(boot)
library(countreg)
library(GGally)
library(lmtest)
library(rms)
library(sandwich)
library(tidyverse) 

theme_set(theme_bw())
```

## Data Load

```{r}
smart_oh <- readRDS("data/smart_ohio.Rds")
```

## Creating A Useful Analytic Subset, `ohioA`

For this work, I'll include the subset of all observations in `smart_oh` with complete data on these 14 variables.

Variable | Description
--------: | -----------------------------------------------
`SEQNO` | Subject identification code
`mmsa_name` | Name of statistical area
`genhealth` | Five categories (E, VG, G, F, P) on general health
`physhealth` | Now thinking about your physical health, which includes physical illness and injury, for how many days during the past 30 days was your physical health not good?
`menthlth` | Now thinking about your mental health, which includes stress, depression, and problems with emotions, for how many days during the past 30 days was your mental health not good?
`healthplan` | 1 if the subject has any kind of health care coverage, 0 otherwise
`costprob` | 1 indicates Yes to "Was there a time in the past 12 months when you needed to see a doctor but could not because of cost?"
`agegroup` | 13 age groups from 18 through 80+
`female` | 1 if subject is female
`incomegroup` | 8 income groups from < 10,000 to 75,000 or more
`bmi` | body-mass index
`smoke100` | 1 if Yes to "Have you smoked at least 100 cigarettes in your entire life?"
`alcdays` | # of days out of the past 30 on which the subject had at least one alcoholic drink

```{r}
ohioA <- smart_oh |>
    select(SEQNO, mmsa_name, genhealth, physhealth, 
           menthealth, healthplan, costprob, 
           agegroup, female, incomegroup, bmi, smoke100, 
           alcdays) |>
    drop_na()
```

### Is age group associated with `physhealth`?

```{r}
ggplot(ohioA, aes(x = agegroup, y = physhealth)) +
    geom_violin(col = "blue")
```

It's hard to see much of anything here. The main conclusion seems to be that 0 is by far the most common response.

Here's a table by age group of:

- the number of respondents in that age group,
- the group's mean `physhealth` response (remember that these are the number of poor physical health days in the last 30),
- their median `physhealth` response (which turns out to be 0 in each group), and
- the percentage of group members who responded 0.

```{r}
ohioA |> group_by(agegroup) |>
    summarize(n = n(), mean = round(mean(physhealth),2), 
              median = median(physhealth),
              percent_0s = round(100*sum(physhealth == 0)/n,1))
```

We can see a real change between the 45-49 age group and the 50-54 age group. The mean difference is clear from the table above, and the plot below (of the percentage with a zero response) in each age group identifies the same story.

```{r}
ohioA |> group_by(agegroup) |>
    summarize(n = n(), 
              percent_0s = round(100*sum(physhealth == 0)/n,1)) |>
    ggplot(aes(y = agegroup, x = percent_0s)) +
    geom_label(aes(label = percent_0s)) +
    labs(x = "% with no Bad Physical Health Days in last 30",
         y = "Age Group")
```

It looks like we have a fairly consistent result in the younger age range (18-49) or the older range (50+). On the theory that most of the people reading this document are in that younger range, we'll focus on those respondents in what follows.

## Exploratory Data Analysis (in the 18-49 group)

We want to predict the 0-30 `physhealth` count variable for the 18-49 year old respondents. 

To start, we'll use two predictors:

- the respondent's body mass index, and
- whether the respondent has smoked 100 cigarettes in their lifetime.

We anticipate that each of these variables will have positive associations with the `physhealth` score. That is, heavier people, and those who have used tobacco will be less healthy, and thus have higher numbers of poor physical health days.

### Build a subset of those ages 18-49

First, we'll identify the subset of respondents who are between 18 and 49 years of age.

```{r} 
ohioA_young.raw <- ohioA |>
    filter(agegroup %in% c("18-24", "25-29", "30-34", 
                           "35-39", "40-44", "45-49")) |>
    droplevels()

ohioA_young.raw |> 
    select(physhealth, bmi, smoke100, agegroup) |>
    summary()
```

### Centering `bmi`

I'm going to center the `bmi` variable to help me interpret the final models later.

```{r}
ohioA_young <- ohioA_young.raw |>
    mutate(bmi_c = bmi - mean(bmi)) 
```

Now, let's look more closely at the distribution of these variables, starting with our outcome.

### Distribution of the Outcome

What's the distribution of `physhealth`?

```{r}
ggplot(ohioA_young.raw, aes(x = physhealth)) +
    geom_histogram(binwidth = 1, fill = "red", col = "white")
```

```{r}
ohioA_young.raw |>
    count(physhealth == 0, physhealth == 30)
```

Most of our respondents said zero, the minimum allowable value, although there is also a much smaller bump at 30, the maximum value we will allow.

Dealing with this distribution is going to be a bit of a challenge. We will develop a series of potential modeling approaches for this sort of data, but before we do that, let's look at the distribution of our other two variables, and the pairwise associations, in a scatterplot matrix.

### Scatterplot Matrix

Now, here's the scatterplot matrix for those `r nrow(ohioA_young)` subjects, using the centered `bmi` data captured in the `bmi_c` variable.

```{r}
temp <- ohioA_young |> select(bmi_c, smoke100, physhealth)

ggpairs(temp)
```

So `bmi_c` and `smoke100` each have modest positive correlations with `physhealth` and only a very small correlation with each other. Here are some summary statistics for this final data. 

### Summary of the final subset of data

Remember that since the mean of `bmi` is `r round(mean(ohioA_young$bmi),1)`, the `bmi_c` values are just `bmi` - `r round(mean(ohioA_young$bmi),1)` for each subject.

```{r}
ohioA_young |> 
    select(bmi, bmi_c, smoke100, physhealth) |>
    summary()
```

## Modeling Strategies Explored Here

We are going to predict `physhealth` using `bmi_c` and `smoke100`. 

- Remember that `physhealth` is a count of the number of poor physical health days in the past 30. 
- As a result, `physhealth` is restricted to taking values between 0 and 30. 

We will demonstrate the use of each of the following regression models, some of which are better choices than others.

1. Ordinary Least Squares (OLS) predicting `physhealth`
2. OLS predicting the logarithm of (`physhealth` + 1)
3. Poisson regression, which is appropriate for predicting counts
4. Poisson regression, adjusted to account for overdispersion

and, in @sec-count2:

5. Negative binomial regression, also used for counts and which adjusts for overdispersion

and, in @sec-count3:

6. Zero-inflated models, in both the Poisson and Negative Binomial varieties, which allow us to fit counts that have lots of zero values
7. A "hurdle" model, which allows us to separately fit a model to predict the incidence of "0" and then a separate model to predict the value of `physhealth` when we know it is not zero
8. Tobit regression, where a lower (and upper) bound may be set, but the underlying model describes a latent variable which can extend beyond these boundaries

### What Will We Demonstrate?

With each approach, we will fit the model and specify procedures for doing so in R. Then we will:

1. Specify the fitted model equation
2. Interpret the model's coefficient estimates and 95% confidence intervals around those estimates.
3. Perform a test of whether each variable adds value to the model, when the other one is already included.
4. Store the fitted values and appropriate residuals for each model.
5. Summarize the model's apparent $R^2$ value, the proportion of variation explained, and the model log likelihood.
6. Perform checks of model assumptions as appropriate.
7. Describe how predictions would be made for two new subjects.
    - Harry has a BMI that is 10 kg/m^2^ higher than the average across all respondents and has smoked more than 100 cigarettes in his life.
    - Sally has a BMI that is 5 kg/m^2^ less than the average across all respondents and has not smoked more than 100 cigarettes in her life.

In addition, for some of the new models, we provide a little of the mathematical background, and point to other resources you can use to learn more about the model.
    
### Extra Data File for Harry and Sally    
    
To make our lives a little easier, I'll create a little tibble containing the necessary data for Harry and Sally.

```{r}
hs_data <- tibble(subj = c("Harry", "Sally"), 
                  bmi_c = c(10, -5), smoke100 = c(1, 0))
hs_data
```


## The OLS Approach

```{r}
mod_ols1 <- lm(physhealth ~ bmi_c + smoke100, 
               data = ohioA_young)

summary(mod_ols1)
confint(mod_ols1)
```

### Interpreting the Coefficients

- The intercept, 2.57, is the predicted `physhealth` (in days) for a subject with average BMI who has not smoked 100 cigarettes or more.
- The `bmi_c` coefficient, 0.144, indicates that for each additional kg/m^2^ of BMI, while holding `smoke100` constant, the predicted `physhealth` value increases by 0.144 day.
- The `smoke100` coefficient, 1.83, indicates that a subject who has smoked 100 cigarettes or more has a predicted `physhealth` value 1.83 days larger than another subject with the same `bmi` but who has not smoked 100 cigarettes.

### Store fitted values and residuals

We can use `broom` to do this. Here, for instance, is a table of the first six predictions and residuals.

```{r}
sm_ols_1 <- augment(mod_ols1, ohioA_young)

sm_ols_1 |> select(physhealth, .fitted, .resid) |> head()
```

It turns out that `r sum(sm_ols_1$.fitted < 0)` of the `r nrow(sm_ols_1)` predictions that we make are below 0, and the largest prediction made by this model is `r round(max(sm_ols_1$.fitted),2)` days.

### Specify the $R^2$ and log(likelihood) values

The `glance` function in the `broom` package gives us the raw and adjusted $R^2$ values, and the model log(likelihood), among other summaries.

```{r}
glance(mod_ols1) |> round(3)
```

Here, we have

Model | $R^2$ | log(likelihood)
----------: | ------: | --------:
OLS | 0.036 | -6730.98

### Check model assumptions

Here is a plot of the residuals vs. the fitted values for this OLS model.

```{r}
ggplot(sm_ols_1, aes(x = .fitted, y = .resid)) +
    geom_point() +
    labs(title = "Residuals vs. Fitted Values for OLS model")
```

As usual, we can check OLS assumptions (linearity, homoscedasticity and normality) with R's complete set of residual plots.

```{r, fig.height = 6}
par(mfrow = c(2,2))
plot(mod_ols1)
par(mfrow = c(1,1))
```

We see the problem with our residuals. They don't follow a Normal distribution.

### Predictions for Harry and Sally

```{r}
predict(mod_ols1, newdata = hs_data,
        interval = "prediction")
```

The prediction for Harry is 5.8 days, and for Sally is 1.8 days. The prediction intervals for each include some values below 0, even though 0 is the smallest possible value.

### Notes

- This model could have been estimated using the `ols` function in the `rms` package, as well.

```{r}
dd <- datadist(ohioA_young)
options(datadist = "dd")

(mod_ols1a <- ols(physhealth ~ bmi_c + smoke100,
                 data = ohioA_young, x = TRUE, y = TRUE))
```


## OLS model on log(`physhealth` + 1) days

We could try to solve the problem of fitting some predictions below 0 by log-transforming the data, so as to force values to be at least 0. Since we have undefined values when we take the log of 0, we'll add one to each of the `physhealth` values before taking logs, and then transform back when we want to make predictions.

```{r}
mod_ols_log1 <- lm(log(physhealth + 1) ~ bmi_c + smoke100,
                   data = ohioA_young)

summary(mod_ols_log1)
confint(mod_ols_log1)
```

### Interpreting the Coefficients

- The intercept, 0.58, is the predicted logarithm of (`physhealth` + 1) (in days) for a subject with average BMI who has not smoked 100 cigarettes or more.
    - We can exponentiate to see that the prediction for (`physhealth` + 1) here is `exp(0.58)` = `r round(exp(0.58),2)` so the predicted `physhealth` for a subject with average BMI who has not smoked 100 cigarettes is `r round(exp(0.58),2) - 1` days.
- The `bmi_c` coefficient, 0.019, indicates that for each additional kg/m^2^ of BMI, while holding `smoke100` constant, the predicted logarithm of (`physhealth` + 1) increases by 0.019
- The `smoke100` coefficient, 0.24, indicates that a subject who has smoked 100 cigarettes or more has a predicted log of (`physhealth` + 1) value that is 0.24 larger than another subject with the same `bmi` but who has not smoked 100 cigarettes.

### Store fitted values and residuals

We can use `broom` to help us with this. Here, for instance, is a table of the first six predictions and residuals, on the scale of our transformed response, log(`physhealth` + 1).

```{r}
sm_ols_log1 <- augment(mod_ols_log1, ohioA_young)

sm_ols_log1 <- sm_ols_log1 |> 
    mutate(outcome = log(physhealth + 1))

sm_ols_log1 |> 
    select(physhealth, outcome, .fitted, .resid) |>
    head()
```

Note that the `outcome` used in this model is log(`physhealth` + 1), so the `.fitted` and `.resid` values react to that outcome, and not to our original `physhealth`.

Another option would be to calculate the model-predicted `physhealth`, which I'll call *ph* for a moment, with the formula:

$$
ph = e^{.fitted} - 1
$$

```{r}
sm_ols_log1 <- sm_ols_log1 |> 
    mutate(pred.physhealth = exp(.fitted) - 1,
           res.physhealth = physhealth - pred.physhealth)

sm_ols_log1 |>
    select(physhealth, pred.physhealth, res.physhealth) |> 
    head()
```

It turns out that `r sum(sm_ols_log1$pred.physhealth < 0)` of the `r nrow(sm_ols_log1)` predictions that we make are below 0, and the largest prediction made by this model is `r round(max(sm_ols_log1$pred.physhealth),2)` days.

### Specify the $R^2$ and log(likelihood) values

The `glance` function in the `broom` package gives us the raw and adjusted $R^2$ values, and the model log(likelihood), among other summaries.

```{r}
glance(mod_ols_log1) |> round(3)
```

Here, we have

Model | Scale | $R^2$ | log(likelihood)
----------: | ------: | --------: | ---------:
OLS on log | log(`physhealth` + 1) | 0.03 | -2893.83

### Getting $R^2$ on the scale of `physhealth`

We could find the correlation of our model-predicted `physhealth` values, after back-transformation, and our observed `physhealth` values, if we wanted to, and then square that to get a sort of $R^2$ value. But this model is not linear in `physhealth`, of course, so it's not completely comparable to our prior OLS model.

### Check model assumptions

As usual, we can check OLS assumptions (linearity, homoscedasticity and normality) with R's complete set of residual plots. Of course, these residuals and fitted values are now on the log(`physhealth` + 1) scale.

```{r, fig.height = 6}
par(mfrow = c(2,2))
plot(mod_ols_log1)
par(mfrow = c(1,1))
```

### Predictions for Harry and Sally

```{r}
predict(mod_ols_log1, newdata = hs_data, 
        interval = "prediction", type = "response")
```

Again, these predictions are on the log(`physhealth` + 1) scale, and so we have to exponentiate them, and then subtract 1, to see them on the original `physhealth` scale.

```{r}
exp(predict(mod_ols_log1, newdata = hs_data, 
            interval = "prediction", type = "response")) - 1
```

The prediction for Harry is now 1.73 days, and for Sally is 0.62 days. The prediction intervals for each again include some values below 0, which is the smallest possible value.

## A Poisson Regression Model

The `physhealth` data describe a count. Specifically a count of the number of days where the subject felt poorly in the last 30. Why wouldn't we model this count with linear regression?

- A count can only be positive. Linear regression would estimate some subjects as having negative counts.
- A count is unlikely to follow a Normal distribution. In fact, it's far more likely that the log of the counts will follow a Poisson distribution.

So, we'll try that. The Poisson distribution is used to model a *count* outcome - that is, an outcome with possible values (0, 1, 2, ...). The model takes a somewhat familiar form to the models we've used for linear and logistic regression^[This discussion is motivated by Section 6.2 of Gelman and Hill.]. If our outcome is *y* and our linear predictors *X*, then the model is:

$$
y_i \sim \mbox{Poisson}(\lambda_i)
$$

The parameter $\lambda$ must be positive, so it makes sense to fit a linear regression on the logarithm of this...

$$
\lambda_i = exp(\beta_0 + \beta_1 X_1 + ... \beta_k X_k)
$$

The coefficients $\beta$ can be exponentiated and treated as multiplicative effects. 

We'll run a generalized linear model with a log link function, ensuring that all of the predicted values will be positive, and using a Poisson error distribution. This is called **Poisson regression**.

Poisson regression may be appropriate when the dependent variable is a count of events. The events must be independent - the occurrence of one event must not make any other more or less likely. That's hard to justify in our case, but we can take a look.

```{r}
mod_poiss1 <- glm(physhealth ~ bmi_c + smoke100, 
                  family = poisson(),
                  data = ohioA_young)

summary(mod_poiss1)
confint(mod_poiss1)
```

### The Fitted Equation

The model equation is 

```
log(physhealth) = 0.91 + 0.035 bmi_c + 0.53 smoke100
```

It looks like both `bmi` and `smoke_100` have confidence intervals excluding 0.

### Interpreting the Coefficients

Our new model for $y_i$ = counts of poor `physhealth` days in the last 30, follows the regression equation:

$$
y_i \sim \mbox{Poisson}(exp(0.91 + 0.035 bmi_c + 0.53 smoke100))
$$

where `smoke100` is 1 if the subject has smoked 100 cigarettes (lifetime) and 0 otherwise, and `bmi_c` is just the centered body-mass index value in kg/m^2^. We interpret the coefficients as follows:

- The constant term, 0.91, gives us the intercept of the regression - the prediction if `smoke100 = 0` and `bmi_c = 0`. In this case, because we've centered BMI, it implies that `exp(0.91)` = `r round(exp(0.91),2)` is the predicted days of poor `physhealth` for a non-smoker with average BMI. 
- The coefficient of `bmi_c`, 0.035, is the expected difference in count of poor `physhealth` days (on the log scale) for each additional kg/m^2^ of body mass index. The expected multiplicative *increase* is $e^{0.035}$ = `r round(exp(0.035),3)`, corresponding to a 3.6% difference in the count.
- The coefficient of `smoke100`, 0.53, tells us that the predictive difference between those who have and who have not smoked 100 cigarettes can be found by multiplying the `physhealth` count by `exp(0.53)` = `r round(exp(0.53),2)`, yielding a 70% increase of the `physhealth` count.

As with linear or logistic regression, each coefficient is interpreted as a comparison where one predictor changes by one unit, while the others remain constant.

### Testing the Predictors

We can use the Wald tests (z tests) provided with the Poisson regression output, or we can fit the model and then run an ANOVA to obtain a test based on the deviance (a simple transformation of the log likelihood ratio.) 

- By the Wald tests shown above, each predictor clearly adds significant predictive value to the model given the other predictor, and we note that the *p* values are as small as R will support.
- The ANOVA approach for this model lets us check the impact of adding `smoke100` to a model already containing `bmi_c`.

```{r}
anova(mod_poiss1, test = "Chisq")
```

To obtain a *p* value for `smoke100`'s impact after `bmi_c` is accounted for, we compare the difference in deviance to a chi-square distribution with 1 degree of freedom. To check the effect of `bmi_c`, we could refit the model with `bmi_c` entering last, and again run an ANOVA.

We could also run a likelihood-ratio test for each predictor, by fitting the model with and without that predictor.

```{r}
mod_poiss1_without_bmi <- glm(physhealth ~ smoke100,
                              family = poisson(),
                              data = ohioA_young)

anova(mod_poiss1, mod_poiss1_without_bmi, test = "Chisq")
```

### Correcting for Overdispersion with `coeftest`/`coefci`

The main assumption we'll think about in a Poisson model is about **overdispersion**. We might deal with the overdispersion we see in this model by changing the nature of the tests we run within this model, using the `coeftest` or `coefci` approaches from the `lmtest` package, as I'll demonstrate next, or we might refit the model using a quasi-likelihood approach, as I'll show in the material to come.

Here, we'll use the `coeftest` and `coefci` approach from `lmtest` combined with robust sandwich estimation (via the `sandwich` package) to re-compute the Wald tests.

```{r}
coeftest(mod_poiss1, vcov. = sandwich)
coefci(mod_poiss1, vcov. = sandwich)
```

Both predictors are still significant, but the standard errors are more appropriate. Later, we'll fit this approach by changing the estimation method to a quasi-likelihood approach.

### Store fitted values and residuals

What happens if we try using the `broom` package in this case? We can, if we like, get our residuals and predicted values right on the scale of our `physhealth` response.

```{r}
sm_poiss1 <- augment(mod_poiss1, ohioA_young,
                     type.predict = "response")

sm_poiss1 |> 
    select(physhealth, .fitted) |>
    head()
```

### Rootogram: see the fit of a count regression model

A **rootogram** is a very useful way to visualize the fit of a count regression model^[See http://data.library.virginia.edu/getting-started-with-negative-binomial-regression-modeling/]. The `rootogram` function in the `countreg` package makes this pretty straightforward. By default, this fits a hanging rootogram on the square root of the frequencies.

```{r}
rootogram(mod_poiss1, max = 30)
```

The red curved line is the theoretical Poisson fit. "Hanging" from each point on the red line is a bar, the height of which represents the difference between expected and observed counts. A bar hanging below 0 indicates underfitting. A bar hanging above 0 indicates overfitting. The counts have been transformed with a square root transformation to prevent smaller counts from getting obscured and overwhelmed by larger counts. We see a great deal of underfitting for counts of 0, and overfitting for most other counts, especially 1-6, with some underfitting again by `physhealth` above 14 days.

### Specify the $R^2$ and log(likelihood) values

We can calculate the $R^2$ as the squared correlation of the fitted values and the observed values.

```{r}
# The correlation of observed and fitted values
(poiss_r <- with(sm_poiss1, cor(physhealth, .fitted)))

# R-square
poiss_r^2
```

The `glance` function in the `broom` package gives us model log(likelihood), among other summaries.

```{r}
glance(mod_poiss1) |> round(3)
```

Here, we have

Model | Scale | $R^2$ | log(likelihood)
----------: | ------: | --------: | ---------:
Poisson | log(`physhealth`) | 0.185 | -10189.33

### Check model assumptions

The Poisson model is a classical generalized linear model, estimated using the method of maximum likelihood. While the default `plot` option for a `glm` still shows the plots we would use to assess the assumptions of an OLS model, we don't actually get much from that, since our Poisson model has different assumptions. It can be useful to look at a plot of residuals vs. fitted values on the original `physhealth` scale.

```{r}
ggplot(sm_poiss1, aes(x = .fitted, y = .resid)) +
    geom_point() +
    labs(title = "Residuals vs. Fitted `physhealth`",
         subtitle = "Original Poisson Regression model")
```

### Using `glm.diag.plots` from the `boot` package

The `glm.diag.plots` function from the `boot` package makes a series of diagnostic plots for generalized linear models.

- (Top, Left) Jackknife deviance residuals against fitted values. This is essentially identical to what you obtain with `plot(mod_poiss1, which = 1)`. A *jackknife deviance* residual is also called a likelihood residual. It is the change in deviance when this observation is omitted from the data. 
- (Top, Right) Normal Q-Q plot of standardized deviance residuals. (Dotted line shows expectation if those standardized residuals followed a Normal distribution, and these residuals generally should.) The result is similar to what you obtain with `plot(mod_poiss1, which = 2)`.
- (Bottom, Left) Cook statistic vs. standardized leverage 
    + n = # of observations, p = # of parameters estimated
    + Horizontal dotted line is at $\frac{8}{n - 2p}$. Points above the line have high influence on the model.
    + Vertical line is at $\frac{2p}{n - 2p}$. Points to the right of the line have high leverage.
- (Bottom, Right) Index plot of Cook's statistic to help identify the observations with high influence. This is essentially the same plot as `plot(mod_poiss1, which = 4)`

```{r, fig.height = 6}
glm.diag.plots(mod_poiss1)
```

When working with these plots, it is possible to use the `iden` command to perform some interactive identification of points in your R terminal. But that doesn't play out effectively in an HTML summary document like this, so we'll leave that out.

### Predictions for Harry and Sally

The predictions from a `glm` fit like this don't include prediction intervals. But we can get predictions on the scale of our original response variable, `physhealth`, like this.

```{r}
predict(mod_poiss1, newdata = hs_data, se.fit = TRUE,
        type = "response")
```

By using `response` as the type, these predictions fall on the original `physhealth` scale. The prediction for Harry is now 5.99 days, and for Sally is 2.08 days. 

## Overdispersion in a Poisson Model

Poisson regressions do not supply an independent variance parameter $\sigma$, and as a result can be overdispersed, and usually are. Under the Poisson distribution, the variance equals the mean - so the standard deviation equals the square root of the mean. The notion of **overdispersion** arises here. When fitting generalized linear models with Poisson error distributions, the residual deviance and its degrees of freedom should be approximately equal if the model fits well.

If the residual deviance is far greater than the degrees of freedom, then overdispersion may well be a problem. In this case, the residual deviance is about 8.5 times the size of the residual degrees of freedom, so that's a clear indication of overdispersion. We saw earlier that the Poisson regression model requires that the outcome (here the `physhealth` counts) be independent. A possible reason for the overdispersion we see here is that `physhealth` on different days likely do not occur independently of one another but likely "cluster" together.

### Testing for Overdispersion?

Gelman and Hill provide an overdispersion test in R for a Poisson model as follows...

```{r}
yhat <- predict(mod_poiss1, type = "response")
n <- arm::display(mod_poiss1)$n
k <- arm::display(mod_poiss1)$k
z <- (ohioA_young$physhealth - yhat) / sqrt(yhat)
cat("overdispersion ratio is ", sum(z^2)/ (n - k), "\n")
cat("p value of overdispersion test is ", 
    pchisq(sum(z^2), df = n-k, lower.tail = FALSE), "\n")
```

The p value here is 0, indicating that the probability is essentially zero that a random variable from a $\chi^2$ distribution with (n - k) = 1971 degrees of freedom would be as large as what we observed in this case. So there is significant overdispersion.

In summary, the `physhealth` counts are overdispersed by a factor of 15.581, which is enormous (even a factor of 2 would be considered large) and also highly statistically significant. The basic correction for overdisperson is to multiply all regression standard errors by $\sqrt{15.581}$ = `r round(sqrt(15.581),2)`. 

The `quasipoisson` model and the negative binomial model that we'll fit below are very similar. We write the overdispersed "quasiPoisson" model as:

$$
y_i \sim \mbox{overdispersed Poisson} (\mu_i exp(X_i \beta), \omega)
$$

where $\omega$ is the overdispersion parameter, 15.581, in our case. The Poisson model we saw previously is then just the overdispersed Poisson model with $\omega = 1$. 

## Fitting the Quasi-Poisson Model

To deal with overdispersion, one useful approach is to apply a **quasi-likelihood estimation procedure**, as follows:

```{r}
mod_poiss_od1 <- glm(physhealth ~ bmi_c + smoke100, 
                  family = quasipoisson(),
                  data = ohioA_young)

summary(mod_poiss_od1)
confint(mod_poiss_od1)
```

This "quasi-Poisson regression" model uses the same mean function as Poisson regression, but now estimated by quasi-maximum likelihood estimation or, equivalently, through the method of generalized estimating equations, where the inference is adjusted by an estimated dispersion parameter. Sometimes, though I won't demonstrate this here, people fit an "adjusted" Poisson regression model, where this estimation by quasi-ML is augmented to adjust the inference via sandwich estimates of the covariances^[See Zeileis A Kleiber C Jackman S *Regression Models for Count Data in R* Vignette at https://cran.r-project.org/web/packages/pscl/vignettes/countreg.pdf].

### The Fitted Equation

The model equation is still `log(physhealth) = 0.91 + 0.035 bmi_c + 0.53 smoke100`. The estimated coefficients are still statistically significant, but the standard errors for each coefficient are considerably larger when we account for overdispersion.

The dispersion parameter for the quasi-Poisson family is now taken to be a bit less than the square root of the ratio of the residual deviance and its degrees of freedom. This is a much more believable model, as a result. 

### Interpreting the Coefficients

No meaningful change from the Poisson model we saw previously.

### Testing the Predictors

Again, we can use the Wald tests (z tests) provided with the Poisson regression output, or we can fit the model and then run an ANOVA to obtain a test based on the deviance (a simple transformation of the log likelihood ratio.) 

- By the Wald tests shown above, each predictor clearly adds significant predictive value to the model given the other predictor, and we note that the *p* values are as small as R will support.
- The ANOVA approach for this model lets us check the impact of adding `smoke100` to a model already containing `bmi_c`.

```{r}
anova(mod_poiss_od1, test = "Chisq")
```

The result is unchanged. To obtain a *p* value for `smoke100`'s impact after `bmi_c` is accounted for, we compare the difference in deviance to a chi-square distribution with 1 degree of freedom. The result is incredibly statistically significant.

To check the effect of `bmi_c`, we could refit the model with and without `bmi_c`, and again run an ANOVA. I'll skip that here.

### Store fitted values and residuals

What happens if we try using the `broom` package in this case? We can, if we like, get our predicted values right on the scale of our `physhealth` response.

```{r}
sm_poiss_od1 <- augment(mod_poiss_od1, ohioA_young,
                     type.predict = "response")

sm_poiss_od1 |> 
    select(physhealth, .fitted) |>
    head()
```

It turns out that `r sum(sm_poiss_od1$.fitted < 0)` of the `r nrow(sm_poiss_od1)` predictions that we make are below 0, and the largest prediction made by this model is `r round(max(sm_poiss_od1$.fitted),2)` days.

The `rootogram` function we've shown doesn't support overdispersed Poisson models at the moment.

### Specify the $R^2$ and log(likelihood) values

We can calculate the $R^2$ as the squared correlation of the fitted values and the observed values.

```{r}
# The correlation of observed and fitted values
(poiss_od_r <- with(sm_poiss_od1, cor(physhealth, .fitted)))

# R-square
poiss_od_r^2
```

The `glance` function in the `broom` package gives us model log(likelihood), among other summaries.

```{r}
glance(mod_poiss_od1) |> round(3)
```

Here, we have

Model | Scale | $R^2$ | log(likelihood)
----------: | ------: | --------: | ---------:
Poisson | log(`physhealth`) | 0.034 | NA

### Check model assumptions

Having dealt with the overdispersion, this should be a cleaner model in some ways, but the diagnostics (other than the dispersion) will be the same. Here is a plot of residuals vs. fitted values on the original `physhealth` scale.

```{r}
ggplot(sm_poiss_od1, aes(x = .fitted, y = .resid)) +
    geom_point() +
    labs(title = "Residuals vs. Fitted `physhealth`",
         subtitle = "Overdispersed Poisson Regression model")
```

I'll skip the `glm.diag.plots` results, since you've already seen them. 

### Predictions for Harry and Sally

The predictions from this overdispersed Poisson regression will match those in the original Poisson regression, but the standard error will be larger.

```{r}
predict(mod_poiss_od1, newdata = hs_data, se.fit = TRUE,
        type = "response")
```

By using `response` as the type, these predictions fall on the original `physhealth` scale. Again, the prediction for Harry is 5.99 days, and for Sally is 2.08 days. 

## Poisson and Quasi-Poisson models using `Glm` from the `rms` package

The `Glm` function in the `rms` package can be used to fit both the original Poisson regression and the quasi-Poisson model accounting for overdispersion.

### Refitting the original Poisson regression with `Glm`

```{r}
d <- datadist(ohioA_young)
options(datadist = "d")

mod_poi_Glm_1 <- Glm(physhealth ~ bmi_c + smoke100,
                     family = poisson(), 
                     data = ohioA_young, 
                     x = T, y = T)

mod_poi_Glm_1
```

### Refitting the overdispersed Poisson regression with `Glm`

```{r}
d <- datadist(ohioA_young)
options(datadist = "d")

mod_poi_od_Glm_1 <- Glm(physhealth ~ bmi_c + smoke100,
                     family = quasipoisson(), 
                     data = ohioA_young, 
                     x = T, y = T)

mod_poi_od_Glm_1
```

The big advantage here is that we have access to the usual `ANOVA`, `summary`, and `nomogram` features that `rms` brings to fitting models.

### ANOVA on a `Glm` fit

```{r}
anova(mod_poi_od_Glm_1)
```

This shows the individual Wald $\chi^2$ tests without having to refit the model.

### ggplots from `Glm` fit

```{r}
ggplot(Predict(mod_poi_od_Glm_1, fun = exp))
```

### Summary of a `Glm` fit

```{r}
summary(mod_poi_od_Glm_1)
```

### Plot of the Summary

```{r}
plot(summary(mod_poi_od_Glm_1))
```

### Nomogram of a `Glm` fit

```{r}
plot(nomogram(mod_poi_od_Glm_1, fun = exp, 
              funlabel = "physhealth days"))
```

Note the use of `fun=exp` in both the ggplot of Predict and the nomogram. What's that doing?

In the next chapter, we'll expand beyond Poisson regression to consider a Negative Binomial model.